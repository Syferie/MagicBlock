name: Build and Release Plugin

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read_version.outputs.version }}
    steps:
    - uses: actions/checkout@v3

    - name: Prepare Build
      run: |
        if [ -f gradle.properties ]; then
          sed -i '/org.gradle.java.home/d' gradle.properties
        fi
        chmod +x gradlew

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'

    - name: List Files
      run: |
        ls -l

    - name: Convert Line Endings
      run: |
        sudo apt-get install -y dos2unix
        dos2unix build.gradle

    - name: Read Version
      id: read_version
      run: |
        VERSION=$(grep "^version" build.gradle | sed -E "s/version *= *['\"]?(.*)['\"]?$/\1/" | tr -d "'\"")
        if [ -z "$VERSION" ]; then
          echo "Version not found in build.gradle. Exiting."
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected Version: $VERSION"

    - name: Build with Gradle
      run: ./gradlew clean build --info --stacktrace
      env:
        GRADLE_OPTS: "-Dorg.gradle.logging.level=info"
        VERSION: ${{ steps.read_version.outputs.version }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: plugin-jar
        path: ${{ github.workspace }}/build/libs/MagicBlock-${{ steps.read_version.outputs.version }}.jar 
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: plugin-jar
        path: .

    - name: List Downloaded Artifacts
      run: ls -l

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: Release ${{ needs.build.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: MagicBlock-${{ needs.build.outputs.version }}.jar
        asset_name: MagicBlock-${{ needs.build.outputs.version }}.jar
        asset_content_type: application/java-archive
